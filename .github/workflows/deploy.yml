name: Deploy

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Log in to GHCR
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push image
        run: |
          IMAGE_TAG="ghcr.io/${{ github.repository }}:${{ github.sha }}"
          LATEST_TAG="ghcr.io/${{ github.repository }}:latest"

          echo "Building image: ${IMAGE_TAG}"
          podman build -t ${IMAGE_TAG} -t ${LATEST_TAG} .

          echo "Pushing image: ${IMAGE_TAG}"
          podman push ${IMAGE_TAG}

          echo "Pushing image: ${LATEST_TAG}"
          podman push ${LATEST_TAG}

      - name: Setup SSH key
        env:
          VM_SSH_KEY: ${{ secrets.VM_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${VM_SSH_KEY}" | tr -d '\r' > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          ssh-keygen -y -f ~/.ssh/ec2_key > /dev/null || (echo "Invalid private key format provided in VM_SSH_KEY secret" && exit 1)

      - name: Deploy to VM
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USER: ${{ secrets.VM_USER }}
          ENV_FILE_CONTENTS: ${{ secrets.ENV_FILE_CONTENTS }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          IMAGE_NAME: "ghcr.io/${{ github.repository }}:latest"
          CONTAINER_NAME: "${{ github.event.repository.name }}_container"
        run: |
          echo "Connecting to ${VM_USER}@${VM_HOST}..."
          ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${VM_USER}@${VM_HOST} /bin/bash <<EOF
            set -e

            echo "--> Setting up environment on VM..."
            CONFIG_DIR="\$HOME/.config/${CONTAINER_NAME}"
            SYSTEMD_USER_DIR="\$HOME/.config/systemd/user"
            ENV_FILE_PATH="\${CONFIG_DIR}/.env"

            mkdir -p "\${CONFIG_DIR}"
            mkdir -p "\${SYSTEMD_USER_DIR}"

            echo "${ENV_FILE_CONTENTS}" > "\${ENV_FILE_PATH}"

            echo "--> Verifying env file exists at: \${ENV_FILE_PATH}"
            ls -l "\${ENV_FILE_PATH}"
            echo "--- Env file contents: ---"
            cat "\${ENV_FILE_PATH}" || echo "Warning: Could not cat env file (might be empty)"
            echo "--------------------------"

            echo "--> Extracting PORT from \${ENV_FILE_PATH}..."

            echo "--> Logging into GHCR on VM..."
            echo "${GHCR_TOKEN}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin

            echo "--> Pulling latest image: ${IMAGE_NAME}"
            podman pull ${IMAGE_NAME}

            SERVICE_NAME="${CONTAINER_NAME}.service"
            SYSTEMD_UNIT_PATH="\${SYSTEMD_USER_DIR}/\${SERVICE_NAME}"

            echo "--> Stopping and removing existing container (if any)..."
            if systemctl --user is-active --quiet "\${SERVICE_NAME}"; then
              echo "Stopping running systemd service: \${SERVICE_NAME}"
              systemctl --user stop "\${SERVICE_NAME}"
            else
              echo "Systemd service \${SERVICE_NAME} not active, attempting podman stop..."
              podman stop ${CONTAINER_NAME} || true
            fi

            podman rm ${CONTAINER_NAME} || true

            echo "--> Creating new container definition: ${CONTAINER_NAME}"
            podman create \
              -p 3000:3000 \
              --env-file "\${ENV_FILE_PATH}" \
              --name ${CONTAINER_NAME} \
              ${IMAGE_NAME}

            if [ \$? -ne 0 ]; then
                echo "ERROR: Failed to create container ${CONTAINER_NAME}"
                exit 1
            fi

            echo "--> Generating systemd unit file using redirection: \${SYSTEMD_UNIT_PATH}"
            podman generate systemd --new --name ${CONTAINER_NAME} > "\${SYSTEMD_UNIT_PATH}"

            if [ \$? -ne 0 ] || [ ! -f "\${SYSTEMD_UNIT_PATH}" ]; then
                echo "ERROR: Failed to generate systemd unit file at \${SYSTEMD_UNIT_PATH} using redirection."
                echo "Listing contents of \${SYSTEMD_USER_DIR}:"
                ls -la "\${SYSTEMD_USER_DIR}" || echo "Could not list directory."
                exit 1
            fi
            echo "Systemd unit file generated successfully."

            echo "--> Reloading systemd user daemon..."
            systemctl --user daemon-reload

            echo "--> Enabling and starting systemd service: \${SERVICE_NAME}"
            systemctl --user enable --now "\${SERVICE_NAME}"

            echo "--> Checking service status:"
            systemctl --user status "\${SERVICE_NAME}" --no-pager || echo "Warning: Service status check command failed, but deployment might still be okay."

            echo "--> Cleaning up GHCR login token..."
            podman logout ghcr.io || true

            echo "--> Deployment successful!"
          EOF

          SSH_EXIT_CODE=$?
          if [ ${SSH_EXIT_CODE} -ne 0 ]; then
            echo "Deployment script failed on remote host with exit code ${SSH_EXIT_CODE}."
            exit 1
          fi
